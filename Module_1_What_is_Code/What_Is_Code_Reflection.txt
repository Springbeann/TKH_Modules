1. When you type the letter A, a computer cannot conceptualize or figure out what the letter A means to a human being. What a computer can do, however, is pull from a list of concepts it does know such as how to decipher where this letter is on the keyboard, or the font, and shapes used to make up this letter. When you are typing the letter A, it has little meaning to a computer in the way it might to you or I, but a computer is meant to interpret individual steps that output a meaning to its user.


2.  Programmers are always interested in writing code that is engaging and useful for its intended user-base. For example, the love of the color blue to a person has a personal connotation, though we might not know how to pinpoint our exact favorite shade. A computer, through hexadecimal code, can zero in on a specific shade of blue by using an index. The color that might be referred to as purple blue is #728FCE in the language HTML and can further be broken down into machine language that the computer interprets. When code like this is written, the intent is an output that is visually captivating to a user. Code is often used to create visual effects such as font, color, and shapes. When this all comes together, the resulting design can be interesting, engaging, and transformational. It can create a web interface with the perfect eye-catching color and font, that can in turn engage users and create a platform for a brand. Code can be engaging in non-visual ways as well! For example, the code that makes up google is designed to index millions of results off of a single search and when requested, Siri is programmed to sing you a song. This is because programmers anticipate the interests of an audience and write code that responds to user input. Every time you say, "Hey Alexa, tell me a joke!" you are utilizing an input that was anticipated and programmed to create an experience. 


3. Software can be thought of as infinitely reproducible “nothings” because all programs start off with  little information or functionality. Bits of information transmitted over a screen, that don’t produce a big result yet. These small processes are, however, important for the creation of software. Google started out as line of code, and another, until it grew to behemoth size. Google started out as a “nothing”, and now has multiples of people coding for it, growing its capabilities and influence. Little bits of nothing, whether it be computer processes, or software, become something through code. This process is replicated infinitely. Code is the building blocks that make up virtually everything we use on devices. Sometimes people  even take bits of others’ code and decide to continue where they left off. All of this culminates into a program that once started out as something so unremarkable but with endless untapped potential. 


4. A programmer is also a translator. Typing "Create MacOS", will output an error message. Silly you, the computer doesn't know what that means! This is comparable to speaking english to a spaniard. In order to create software, you must speak precisely in order for the computer to interpret intent. Syntax is like grammar that bridges human language and machine language. In programming, the given syntax applied correctly, will produce "code"-- a function that results from good communication between you and the computer. When you use syntax to write code, the computer interprets instructions and translates them into machine language. When the directions are understood, the computer outputs a result. All software is made up of this process. Whether it be the "play" button on Spotify, or Windows 11, they are all the results of many conversations had between a computer and a programmer. 


5. An algorithm is comparable to a recipe. Like a recipe, an algorithm consists of detailed steps to return exact results. For example, Facebook programmers might utilize an algorithm in their code that will create more accurate friend recommendations. The steps the Facebook algorithm might use to determine that you and your cousin Marcia know each other might look like this: 
1. Through user information, Facebook has determined you and Marcia live in the same city
2.You and Marcia have X amount of friends in common 
3. You and Marcia are both tagged in grandma's picture
With these steps, Facebook determines that there are enough commonalities to connect you and Marcia.This is one example of an algorithm. Algorithms are not code themselves, but rather tools utilized by code in order to reach certain mathematical or logical conclusions. Programmers utilize algorithms in order to create problem solving methods for their software.


6. DRY in coding stands for “Don’t repeat yourself”. This is how programmers save time and effort when creating software. The aim is reducing mistakes, and keeping code shorter. If you know that you would like to perform a function 50 times, you need not write every step repeatedly. This can result in unnecessary syntax errors. You'd have to sift through all instances of the same written command to correct the mistakes. This means more debugging. Instead create a variable that can be reutilized for all instances of this command. This results in less human error, and less debugging. 


7. Object oriented programming is a method of programming belonging to certain languages, such as python and javascript. Object oriented programming or OOP is utilized by creating classes, objects, attributes, and methods. This form of programming allows information to exist under large categories and be broken up into specific details that give it a unique identity aside from its class umbrella. Classes are broad categories that house objects, or specific examples of something belonging to this class. Objects are further defined by having attributes and methods that describe properties and behavior.


8. Functioning code consists of executed and memorized data. Data is information programmers input to create a program. Data can take the form of variables, functions, and any other general traits we want to see replicated in code. When we correctly write syntax that is read by a computer, that is data stored within the program. Now the program is informed that it must perform a certain task or retain certain information. Data can be anything from a print function, to a float point calculation. Coding in essence is the reading and writing of data with a computer. 


9. Framework, when referring to software, is a platform tool for development. Frameworks provide a layer of abstraction to programmers that simplifies the programming process. Without frameworks, the process of programming would be more tedious. Some examples of frameworks making the programming process easier, would be in the instance of debugging. Without a framework, you might not get a highlighted bit of information that tells you where the bug is located and would instead have to scour lines of code on your own. Frameworks also possess libraries that allow already written code to be called upon and used repeatedly (a callback to the use of the DRY concept). Frameworks are also good collaborative platforms that allow programmers to work together, and utilize each other's code. If machine code makes it easier for computers to understand us, frameworks exist to make it easier for us to understand how to communicate with computers. 


10.  Debugging is the process of searching for and correcting any errors that might exist in your code. Debugging takes place when the computer does not understand what you are trying to communicate. This can sometimes result in a syntax error that explains to you that what you are trying to program is not clear. When a syntax error is prompted, programmers must decipher where that specific error took place. This can be tedious because the list of syntax rules for any given programming language can be long. In a sea of code, a missed parentheses, or quotation mark can easily go unnoticed. Sometimes, no error message is returned, but a program produces an unintended output. Debugging is one of the most frequent and important processes of coding. Because of debugging, software is able to function in the precise way it was intended by the developers. 




11.  I believe that programming has and will continue to have intrinsic value in our lifetimes. Slowly but surely, more and more things will be automated, abstracted and studied using code. I believe to me, one of the best possible uses of my time, would be to soak up all I can. Programming, to me, is not only the process of communicating valuable information to a computer, but is also about studying us as people. Through programming, we surprisingly learn a lot about the human condition and human interests. Projects and research in coding get funded due to the ever expanding appetite people have for innovation. Each project starts off with the need to solve a problem, or answer a question that all relates back to the interests of human beings. For example, the data in question: could be “how often should the average person be exercising”? A question like this, reflects the human condition and human interests. From then on, this query could spark inspiration for programmers in numerous ways. Data scientists might decide to use this data to analyze patterns and trends. This research might go hand in hand with software developers who are inspired to create a software program for fitness. Scenarios like this happen every single day. While computers are used to create and interpret programming, ultimately programming is about the interests of people like you and I. 


It is one of the most interesting and most valuable insights we could ever possibly have into the human condition, and the knowledge and innovation that come from it are ever expanding. I have never been more interested in people, than when I saw all the interesting data that results from human inspiration alone. There is code written to navigate submarines to the depths of the sea, or to the tip of every star in space. There were times when these were only dreams, hardly conceivable to the brightest minds, and yet daily we create and innovate at speeds unlike that which the world had ever seen before. Purely because we dare to dream of it, and especially because now--we can.  Programming is one of the most powerful tools to be utilized in human history, and I am dying to be at the forefront of innovation.